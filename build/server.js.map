{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,gDAAwB;AACxB,sDAA8B;AAC9B,sDAA8B;AAE9B,MAAM,KAAK,GAAG,iBAAO,EAAE,CAAC;AAEjB,MAAM,UAAU,GAAG,CAAC,IAAiC,EAAE,WAAmB,EAAE,MAAY,EAAE,EAAE;;yBAAxE,EAAA,aAAO,OAAO,CAAC,GAAG,CAAC,IAAI,mCAAI,MAAM;gCAAE,EAAA,mBAAmB;2BAAE,EAAA,YAAY;IAC7F,KAAK,CAAC,GAAG,CAAC,cAAI,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC9D,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,cAAI,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAEvE,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,GAAG;QAC/B,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC;QACrB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAI;YACF,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,qBAAqB,GAAG,GAAG,CAAC,CAAC,CAAC;SACvD;QAAC,OAAO,CAAC,EAAE,GAAE;QACd,GAAG;aACA,IAAI,CACH,iBAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,EAAE;YACvC,iEAAiE;YACjE,MAAM,8BAA8B,GAAG,QAAQ,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;YACvF,IAAI,8BAA8B,IAAI,8BAA8B,KAAK,MAAM,EAAE;gBAC/E,OAAO,CAAC,GAAG,CACT,eAAK,CAAC,IAAI,CACR,mEAAmE;oBACjE,eAAK,CAAC,KAAK,CAAC,8BAA8B,CAAC;oBAC3C,IAAI,CACP,CACF,CAAC;gBACF,QAAQ,CAAC,OAAO,CAAC,6BAA6B,CAAC,GAAG,MAAM,CAAC;aAC1D;QACH,CAAC,CAAC,CACH;aACA,IAAI,CAAC,GAAG,CAAC,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAEnB,kBAAkB;IAClB,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;IACtE,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,eAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtD,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,IAAI,CAAC,eAAe,GAAG,eAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACpE,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,IAAI,CAAC,UAAU,GAAG,eAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACjE,OAAO,CAAC,GAAG,CACT,eAAK,CAAC,IAAI,CACR,6EAA6E;QAC3E,eAAK,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,CACtD,CACF,CAAC;AACJ,CAAC,CAAC;AA3CW,QAAA,UAAU,cA2CrB","sourcesContent":["import chalk from 'chalk';\nimport cors from 'cors';\nimport express from 'express';\nimport request from 'request';\n\nconst proxy = express();\n\nexport const startProxy = (port = process.env.PORT ?? '8010', credentials = false, origin = '*') => {\n  proxy.use(cors({ credentials: credentials, origin: origin }));\n  proxy.options('*', cors({ credentials: credentials, origin: origin }));\n\n  proxy.use('/', function (req, res) {\n    const { path } = req;\n    const url = path.slice(1);\n    try {\n      console.log(chalk.green('Request Proxied -> ' + url));\n    } catch (e) {}\n    req\n      .pipe(\n        request(url).on('response', (response) => {\n          // In order to avoid https://github.com/expressjs/cors/issues/134\n          const accessControlAllowOriginHeader = response.headers['access-control-allow-origin'];\n          if (accessControlAllowOriginHeader && accessControlAllowOriginHeader !== origin) {\n            console.log(\n              chalk.blue(\n                'Override access-control-allow-origin header from proxified URL : ' +\n                  chalk.green(accessControlAllowOriginHeader) +\n                  '\\n',\n              ),\n            );\n            response.headers['access-control-allow-origin'] = origin;\n          }\n        }),\n      )\n      .pipe(res);\n  });\n\n  proxy.listen(port);\n\n  // Welcome Message\n  console.log(chalk.bgGreen.black.bold.underline('\\n Proxy Active \\n'));\n  console.log(chalk.blue('PORT: ' + chalk.green(port)));\n  console.log(chalk.blue('Credentials: ' + chalk.green(credentials)));\n  console.log(chalk.blue('Origin: ' + chalk.green(origin) + '\\n'));\n  console.log(\n    chalk.cyan(\n      'To start using the proxy simply replace the proxied part of your url with: ' +\n        chalk.bold('http://localhost:' + port + '/' + '\\n'),\n    ),\n  );\n};\n"]}